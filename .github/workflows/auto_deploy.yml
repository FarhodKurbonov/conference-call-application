# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on: [push]
#  schedule:
#    - cron: '0 0 * * *'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Get versions data from repo
      run: wget -O maven-metadata.xml https://oss.sonatype.org/service/local/repositories/snapshots/content/io/antmedia/ant-media-server/maven-metadata.xml       
    
    - name: Download war File
      run: |
        export LATEST_SNAPSHOT=$(cat maven-metadata.xml | grep "<version>" | tail -n 1 |  xargs | cut -c 10-23)
        echo $LATEST_SNAPSHOT
        wget -O ConferenceCall.war "https://oss.sonatype.org/service/local/artifact/maven/redirect?r=snapshots&g=io.antmedia.webrtc&a=ConferenceCall&v=${LATEST_SNAPSHOT}&e=war"
        ls -al
        
    - name: Login to server
      run: |
        Login=false
        while ! $Login; do
          echo "Sedinging login request "     
          response=$(curl -X POST -H "Accept: Application/json" -H "Content-Type: application/json" ${{ secrets.SERVER_URL }}/rest/v2/users/authenticate -d '{"email":"${{ secrets.USER_NAME }}","password":"${{ secrets.PASSWORD }}"}' -c cookie.txt )
          if [[ ! "$response" =~ "true" ]]; then
            echo "something went wrong $response"     
            sleep 3m
          else
            Login=true
            break
          fi
        done
        
    - name: Delete Old App
      run: |
        curl -i -X DELETE -H "Accept: Application/json" -H "Content-Type: application/json" "${{ secrets.SERVER_URL }}/rest/v2/applications/Conference" -b cookie.txt
        sleep 10
        
    - name: Create New App
      run: |
        export WAR_FILE_NAME="ConferenceCall.war"
        create_request_sent=false
        APPNAME="Conference"
        end_time=$((SECONDS + 800)) 
        function check_app_existence() {
            API_URL="${{ secrets.SERVER_URL }}/rest/v2/applications"
            response=$(curl -s "$API_URL" -b cookie.txt)
        
            if [ $? -eq 0 ]; then
                if [[ "$response" =~ "html" ]]; then
                    echo "something went wrong $responce"
                elif [[ "$response" =~ $APPNAME ]];
                    echo 1  # App exists
                else
                    echo 0  # App does not exist
                fi
            else
                echo -1
        
            fi
        }
        function send_create_request() {
            curl -X PUT -H "Accept: Application/json" -H "Content-Type: multipart/form-data" -F "file=@./$WAR_FILE_NAME" "${{ secrets.SERVER_URL }}/rest/v2/applications/Conference" -b cookie.txt
            echo "create request sent "
        }

        while [ $SECONDS -lt $end_time ]; do
            sleep 5
            app_exist=$(check_app_existence)
            echo "check if app exist $app_exist"
            if [ $app_exist -eq -1 ]; then
                echo "API CALL FAIED "
            fi
            if [ $app_exist -eq 1 ] && [ $create_request_sent = false ]; then
                echo "waitng for app to get deleted."
            elif [ $app_exist -eq 0 ] && [ $create_request_sent = true ]; then
                echo "Waiting for app to get created..."
            elif [ $app_exist -eq 0 ] && [ $create_request_sent = false ]; then
                send_create_request
                create_request_sent=true
            elif [ $app_exist -eq 1 ] && [ $create_request_sent = true ]; then
                echo "Application created successfully."
                break
            fi
        done
